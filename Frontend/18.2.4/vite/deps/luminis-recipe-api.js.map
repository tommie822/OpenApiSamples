{
  "version": 3,
  "sources": ["../../../../../node_modules/luminis-recipe-api/fesm2022/luminis-recipe-api.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n}\nconst BASE_PATH = new InjectionToken('basePath');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\nclass Configuration {\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  apiKeys;\n  username;\n  password;\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  accessToken;\n  basePath;\n  withCredentials;\n  /**\n   * Takes care of encoding query- and form-parameters.\n   */\n  encoder;\n  /**\n   * Encoding of various path parameter\n   * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n   * <p>\n   * See {@link README.md} for more details\n   * </p>\n   */\n  encodeParam;\n  /**\n   * The keys are the names in the securitySchemes section of the OpenAPI\n   * document. They should map to the value used for authentication\n   * minus any standard prefixes such as 'Basic' or 'Bearer'.\n   */\n  credentials;\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n    if (configurationParameters.encodeParam) {\n      this.encodeParam = configurationParameters.encodeParam;\n    } else {\n      this.encodeParam = param => this.defaultEncodeParam(param);\n    }\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n  }\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n    const type = contentTypes.find(x => this.isJsonMime(x));\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n    return type;\n  }\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n    const type = accepts.find(x => this.isJsonMime(x));\n    if (type === undefined) {\n      return accepts[0];\n    }\n    return type;\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n  defaultEncodeParam(param) {\n    // This implementation exists as fallback for missing configuration\n    // and for backwards compatibility to older typescript-angular generator versions.\n    // It only works for the 'simple' parameter style.\n    // Date-handling only works for the 'date-time' format.\n    // All other styles and Date-formats are probably handled incorrectly.\n    //\n    // But: if that's all you need (i.e.: the most common use-case): no need for customization!\n    const value = param.dataFormat === 'date-time' && param.value instanceof Date ? param.value.toISOString() : param.value;\n    return encodeURIComponent(String(value));\n  }\n}\n\n/**\n * Receptenboek API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * Contact: tom.tiggeloven@luminis.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\nclass RecipesService {\n  httpClient;\n  basePath = 'https://localhost:7215';\n  defaultHeaders = new HttpHeaders();\n  configuration = new Configuration();\n  encoder;\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n  // @ts-ignore\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substring(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n    return httpParams;\n  }\n  addRecipe(recipeCreateDto, observe = 'body', reportProgress = false, options) {\n    if (recipeCreateDto === null || recipeCreateDto === undefined) {\n      throw new Error('Required parameter recipeCreateDto was null or undefined when calling addRecipe.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let localVarTransferCache = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n    // to determine the Content-Type header\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/recipes`;\n    return this.httpClient.request('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: recipeCreateDto,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress\n    });\n  }\n  getRecipeById(recipeId, observe = 'body', reportProgress = false, options) {\n    if (recipeId === null || recipeId === undefined) {\n      throw new Error('Required parameter recipeId was null or undefined when calling getRecipeById.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let localVarTransferCache = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/recipes/${this.configuration.encodeParam({\n      name: \"recipeId\",\n      value: recipeId,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: undefined\n    })}`;\n    return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress\n    });\n  }\n  updateRecipeById(recipeId, recipeCreateDto, observe = 'body', reportProgress = false, options) {\n    if (recipeId === null || recipeId === undefined) {\n      throw new Error('Required parameter recipeId was null or undefined when calling updateRecipeById.');\n    }\n    if (recipeCreateDto === null || recipeCreateDto === undefined) {\n      throw new Error('Required parameter recipeCreateDto was null or undefined when calling updateRecipeById.');\n    }\n    let localVarHeaders = this.defaultHeaders;\n    let localVarHttpHeaderAcceptSelected = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n    let localVarHttpContext = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n    let localVarTransferCache = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n    // to determine the Content-Type header\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n    let responseType_ = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n    let localVarPath = `/recipes/${this.configuration.encodeParam({\n      name: \"recipeId\",\n      value: recipeId,\n      in: \"path\",\n      style: \"simple\",\n      explode: false,\n      dataType: \"number\",\n      dataFormat: undefined\n    })}`;\n    return this.httpClient.request('put', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: recipeCreateDto,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress\n    });\n  }\n  static ɵfac = function RecipesService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RecipesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RecipesService,\n    factory: RecipesService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecipesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [BASE_PATH]\n    }]\n  }, {\n    type: Configuration,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nconst APIS = [RecipesService];\n\n/**\n * Receptenboek API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * Contact: tom.tiggeloven@luminis.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Receptenboek API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * Contact: tom.tiggeloven@luminis.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Receptenboek API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * Contact: tom.tiggeloven@luminis.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nclass ApiModule {\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: ApiModule,\n      providers: [{\n        provide: Configuration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n  constructor(parentModule, http) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n  static ɵfac = function ApiModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ApiModule)(i0.ɵɵinject(ApiModule, 12), i0.ɵɵinject(i1.HttpClient, 8));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ApiModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], () => [{\n    type: ApiModule,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: i1.HttpClient,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APIS, ApiModule, BASE_PATH, COLLECTION_FORMATS, Configuration, RecipesService };\n"],
  "mappings": "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",
  "names": []
}
